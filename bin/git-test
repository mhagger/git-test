#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-

# Copyright (c) 2013-2016 Michael Haggerty
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>

# Run "git test --help for the documentation.
#
# The project's main repository is located at
#
#     https://github.com/mhagger/git-test

"""Run tests within a Git project and remember the test results.

`git test` consists of a few things:

* A way of defining tests for a Git project. The commands to be run
  for a particular test are stored in the repository's Git
  configuration.

* Tools for running such tests against single Git commits or against
  ranges of commits.

* A scheme for storing the results of such tests as git notes. The
  results are connected to the tree of the commit that was tested, so
  the test results remain valid across some types of merges, rebases,
  etc.

* The intelligence not to re-run a test whose results are already
  known.

Example: make sure that all commits on a feature branch pass the tests
implied by `make -j16 test` (run the tests in a worktree to avoid
tying up your main repository):

    $ git config test.full.command 'make -j16 test'
    $ git worktree add --detach ../tests feature
    $ cd ../tests
    $ git test run --test=full master..feature

Any time you make changes to the feature branch in your main
repository, you can re-run the last command in the `tests` worktree.
It will only test commits with trees that it hasn't been seen before.

"""

import locale
import sys
import os
import re
import subprocess
import argparse


class AnsiColor(str):
    END = '\033[0m'

    @classmethod
    def disable(cls):
        def nocolor(s):
            return s

        cls.BLACK = nocolor
        cls.RED = nocolor
        cls.GREEN = nocolor
        cls.YELLOW = nocolor
        cls.BLUE = nocolor
        cls.MAGENTA = nocolor
        cls.CYAN = nocolor
        cls.B_GRAY = nocolor
        cls.D_GRAY = nocolor
        cls.B_RED = nocolor
        cls.B_GREEN = nocolor
        cls.B_YELLOW = nocolor
        cls.B_BLUE = nocolor
        cls.B_MAGENTA = nocolor
        cls.B_CYAN = nocolor
        cls.WHITE = nocolor
        cls.END = nocolor

    def __call__(self, text):
        """Return a string that displays 'text' in the color of 'self'.

        Note that these calls don't nest correctly.

        """

        if text[-1] == '\n':
            return self + text[:-1] + AnsiColor.END + '\n'
        else:
            return '%s%s%s' % (self, text, AnsiColor.END)


# Define class-level constants for the colors:
AnsiColor.BLACK = AnsiColor('\033[0;30m')
AnsiColor.RED = AnsiColor('\033[0;31m')
AnsiColor.GREEN = AnsiColor('\033[0;32m')
AnsiColor.YELLOW = AnsiColor('\033[0;33m')
AnsiColor.BLUE = AnsiColor('\033[0;34m')
AnsiColor.MAGENTA = AnsiColor('\033[0;35m')
AnsiColor.CYAN = AnsiColor('\033[0;36m')
AnsiColor.B_GRAY = AnsiColor('\033[0;37m')
AnsiColor.D_GRAY = AnsiColor('\033[1;30m')
AnsiColor.B_RED = AnsiColor('\033[1;31m')
AnsiColor.B_GREEN = AnsiColor('\033[1;32m')
AnsiColor.B_YELLOW = AnsiColor('\033[1;33m')
AnsiColor.B_BLUE = AnsiColor('\033[1;34m')
AnsiColor.B_MAGENTA = AnsiColor('\033[1;35m')
AnsiColor.B_CYAN = AnsiColor('\033[1;36m')
AnsiColor.WHITE = AnsiColor('\033[1;37m')


def good_bad_text(value):
    if value == 'good' or value == 'known-good':
        return AnsiColor.GREEN(value)
    if value == 'bad' or value == 'known-bad':
        return AnsiColor.RED(value)
    if value == 'unknown':
        return AnsiColor.YELLOW(value)
    return value


if not (0x02060000 <= sys.hexversion):
    sys.stderr.write(AnsiColor.RED('fatal: Python version 2.6 or later is required'))
    sys.exit(125)


PREFERRED_ENCODING = locale.getpreferredencoding()


from subprocess import check_call

# Backwards compatibility:
try:
    from subprocess import CalledProcessError
except ImportError:
    # Use definition from Python 2.7 subprocess module:
    class CalledProcessError(Exception):
        def __init__(self, returncode, cmd, output=None):
            self.returncode = returncode
            self.cmd = cmd
            self.output = output
        def __str__(self):
            return "Command '%s' returned non-zero exit status %d" % (self.cmd, self.returncode)

try:
    from subprocess import check_output as _check_output
except ImportError:
    # Use definition from Python 2.7 subprocess module:
    def _check_output(*popenargs, **kwargs):
        if 'stdout' in kwargs:
            raise ValueError('stdout argument not allowed, it will be overridden.')
        process = subprocess.Popen(stdout=subprocess.PIPE, *popenargs, **kwargs)
        output, unused_err = process.communicate()
        retcode = process.poll()
        if retcode:
            cmd = kwargs.get("args")
            if cmd is None:
                cmd = popenargs[0]
            try:
                raise CalledProcessError(retcode, cmd, output=output)
            except TypeError:
                # Python 2.6's CalledProcessError has no 'output' kw
                raise CalledProcessError(retcode, cmd)
        return output


verbosity = 0

class Fatal(Exception):
    """An exception that indicates a normal failure of the script.

    Fatals are reported at top level by printing str(e) and exiting
    sys.exit(125) rather than via a Python stack dump.

    """

    pass


class UncleanWorkTreeError(Fatal):
    pass


class UserTestError(CalledProcessError):
    """The user's test failed."""

    pass


def communicate(process, input=None):
    """Return decoded output from process."""
    if input is not None:
        input = input.encode(PREFERRED_ENCODING)

    output, error = process.communicate(input)

    output = None if output is None else output.decode(PREFERRED_ENCODING)
    error = None if error is None else error.decode(PREFERRED_ENCODING)

    return (output, error)


def _decode_output(value):
    """Decodes Git output into a unicode string.

    On Python 2 this is a no-op; on Python 3 we decode the string as
    suggested by [1] since we know that Git treats paths as just a sequence
    of bytes and all of the output we ask Git for is expected to be a file
    system path.

    [1] http://docs.python.org/3/c-api/unicode.html#file-system-encoding

    """
    if sys.hexversion < 0x3000000:
        return value
    return value.decode(sys.getfilesystemencoding(), 'surrogateescape')


def check_output(*popenargs, **kwargs):
    try:
        return _decode_output(_check_output(*popenargs, **kwargs))
    except CalledProcessError as e:
        raise CalledProcessError(e.returncode, e.cmd, _decode_output(e.output))


def chatty_call(*popenargs, **kwargs):
    """Run a program like `check_call()`, but with variable verbosity.

    Compare the current global `verbosity` with the keyword argument `level`:

    * If verbosity < level - 1, then never show the command's output.
    * If verbosity == level - 1, then show the output only if there is an error.
    * If verbosity >= level, then show the output in any case.

    The default level is 1 (i.e., at the default verbosity level, show
    the output only in the case of an error).

    The caller should not set keyword arguments `stdout` or `stderr`.

    """

    level = kwargs.pop('level', 1)
    kwargs['stderr'] = subprocess.STDOUT
    if verbosity < level - 1:
        kwargs['stdout'] = open(os.devnull, 'wb')
        check_call(*popenargs, **kwargs)
    elif verbosity == level - 1:
        try:
            check_output(*popenargs, **kwargs)
        except CalledProcessError as e:
            sys.stderr.write(e.output)
            raise
    else:
        kwargs['stdout'] = sys.stderr
        check_call(*popenargs, **kwargs)


class RevParseError(Fatal):
    pass


def rev_parse(arg, abbrev=None):
    if abbrev:
        cmd = ['git', 'rev-parse', '--verify', '-q', '--short=%d' % (abbrev,), arg]
    else:
        cmd = ['git', 'rev-parse', '--verify', '-q', arg]

    try:
        return check_output(cmd).strip()
    except CalledProcessError:
        raise RevParseError('%r is not a valid commit!' % (arg,))


def rev_list(*args):
    """Iterate over the lines of output of rev-list

    Run `git rev-list` with the specified args, and iterate over the
    lines of output, one at a time, with whitespace stripped off.

    """

    process = subprocess.Popen(
        ['git', 'rev-list'] + list(args) + ['--'],
        stdout=subprocess.PIPE,
        )
    for line in process.stdout:
        yield _decode_output(line).strip()

    retcode = process.wait()
    if retcode:
        raise Fatal('git rev-list %s failed' % (' '.join(args),))


def uniqify(l):
    """Iterate over the unique items in l, in the original order.

    Yield an item only the first time it is seen."""

    seen = set()
    for i in l:
        if i not in seen:
            yield i
            seen.add(i)


_empty_tree = None

def get_empty_tree():
    """Return the SHA-1 for the empty tree object.

    Also make sure it is present in the current repository."""

    global _empty_tree

    if _empty_tree is None:
        cmd = ['git', 'hash-object', '-t', 'tree', '-w', '--stdin']
        _empty_tree = check_output(cmd, stdin=open(os.devnull, 'rb')).rstrip()

    return _empty_tree


def refresh_index():
    process = subprocess.Popen(
        ['git', 'update-index', '-q', '--ignore-submodules', '--refresh'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        )
    out, err = communicate(process)
    retcode = process.poll()
    if retcode:
        raise UncleanWorkTreeError(err.rstrip() or out.rstrip())


def unstaged_changes():
    """Return True iff there are unstaged changes in the working copy"""

    try:
        chatty_call(['git', 'diff-files', '--quiet', '--ignore-submodules'])
        return False
    except CalledProcessError:
        return True


def uncommitted_changes():
    """Return True iff the index contains uncommitted changes."""

    try:
        chatty_call([
            'git', 'diff-index', '--cached', '--quiet',
            '--ignore-submodules', 'HEAD', '--',
            ])
        return False
    except CalledProcessError:
        return True


def require_clean_work_tree(action):
    """Verify that the current tree is clean.

    The code is a Python translation of the git-sh-setup(1) function
    of the same name."""

    process = subprocess.Popen(
        ['git', 'rev-parse', '--verify', 'HEAD'],
        stdout=subprocess.PIPE, stderr=subprocess.PIPE,
        )
    err = communicate(process)[1]
    retcode = process.poll()
    if retcode:
        raise UncleanWorkTreeError(err.rstrip())

    refresh_index()

    error = []
    if unstaged_changes():
        error.append('Cannot %s: You have unstaged changes.' % (action,))

    if uncommitted_changes():
        if not error:
            error.append('Cannot %s: Your index contains uncommitted changes.' % (action,))
        else:
            error.append('Additionally, your index contains uncommitted changes.')

    if error:
        raise UncleanWorkTreeError('\n'.join(error))


FAIL_HEADER_TEMPLATE = """\

*******************************************************************************
BAD COMMIT %(revision)s: (%(tests)s)

"""

FAIL_TRAILER_TEMPLATE = """\
*******************************************************************************

FAILURE!
"""

class Test(object):
    def __init__(self, name, _command=None):
        self.name = name
        self.notes_ref = 'tests/%s' % (self.name,)
        self.full_ref = 'refs/notes/tests/%s' % (self.name,)
        self._command = _command

    def initialize_status(self, msg):
        cmd = ['git', 'commit-tree', '-m', msg, get_empty_tree()]
        commit = check_output(cmd).rstrip()

        cmd = [
            'git', 'update-ref',
            '-m', 'test: %s' % (msg,),
            self.full_ref, commit,
            ]
        chatty_call(cmd)

    def read_status(self, revision, revision_short=None):
        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'show', '%s^{tree}' % (revision,),
            ]
        try:
            status = check_output(cmd, stderr=open(os.devnull, 'wb')).rstrip()
        except CalledProcessError:
            return 'unknown'

        if status not in ['good', 'bad']:
            raise Fatal(
                'fatal: unrecognized status %r for tree %s^{tree}!'
                % (status, revision_short or revision),
                )

        return status

    def write_status(self, revision, value):
        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'add', '-f', '%s^{tree}' % (revision,), '-m', value,
            ]
        try:
            chatty_call(cmd)
        except CalledProcessError:
            raise Fatal('fatal: error adding note to %s^{tree}' % (revision,))
        else:
            if verbosity >= 0:
                sys.stderr.write(
                    'Marked tree %s^{tree} to be %s for test \'%s\'\n' % (
                        revision, good_bad_text(value), self.name,
                    ),
                )

    def forget_status(self, revisions):
        """Forget the stored results (if any) for the specified revisions."""

        cmd = [
            'git', 'notes', '--ref=%s' % (self.notes_ref,),
            'remove', '--ignore-missing', '--stdin',
            ]

        level = 1
        kwargs = dict(stdin=subprocess.PIPE, stderr=subprocess.STDOUT)

        if verbosity < level - 1:
            kwargs['stdout'] = open(os.devnull, 'wb')
        elif verbosity == level - 1:
            kwargs['stdout'] = subprocess.PIPE

        try:
            process = subprocess.Popen(cmd, **kwargs)
            rev_args = ''.join('%s^{tree}\n' % (r,) for r in revisions)
            out = communicate(process, rev_args)[0]
            retcode = process.poll()
            if retcode:
                if verbosity == level - 1:
                    sys.stderr.write(out)
                raise Fatal('fatal: error removing one or more existing notes')
        except CalledProcessError:
            raise Fatal('fatal: error removing one or more existing notes')

    @property
    def command(self):
        if self._command is None:
            cmd = ['git', 'config', '--get', 'test.%s.command' % (self.name,)]
            try:
                self._command = check_output(cmd).rstrip()
            except CalledProcessError:
                raise Fatal('fatal: test %s is not defined!' % (self.name,))
        return self._command

    @command.setter
    def command(self, value):
        cmd = ['git', 'config', 'test.%s.command' % (self.name,), value]
        chatty_call(cmd)
        self._command = value

    def run(self, extra_env={}):
        """Run this test against the current contents of the working tree."""

        env = os.environ.copy()
        if extra_env:
            for k, v in extra_env.items():
                if v is not None:
                    env[k] = v
                elif k in env:
                    del env[k]

        cmd = ['sh', '-c', self.command]
        try:
            chatty_call(cmd, level=0, env=env)
        except CalledProcessError as e:
            raise UserTestError(e.returncode, e.cmd, e.output)

    def remove_status(self, msg):
        """Delete the note reference for this test."""

        cmd = [
            'git', 'update-ref', '-d', 'refs/notes/tests/%s' % (self.name,),
            '-m', msg,
            ]
        chatty_call(cmd)

    def remove(self, msg):
        cmd = ['git', 'config', '--remove-section', 'test.%s' % (self.name,)]
        chatty_call(cmd)
        self.remove_status(msg)


test_config_re = re.compile(r'^test\.(?P<name>.*)\.(?P<subkey>[^\.]+)$')

def iter_tests():
    """Iterate over all tests that are defined in the git configuration."""

    cmd = ['git', 'config', '--get-regexp', '--null', r'^test\.']
    out = check_output(cmd)
    lines = [line for line in out.split('\0') if line]

    # A list of test names found (to preserve their order):
    names = []
    # A map `{test_name : {subkey : value}}`:
    tests = {}

    for line in lines:
        (key, value) = line.split('\n', 1)
        m = test_config_re.match(key)

        if m:
            name = m.group('name')
            subkey = m.group('subkey')

            test = tests.get(name)
            if not test:
                names.append(name)
                test = tests[name] = {}

            if subkey == 'command':
                tests.setdefault(name, {})['command'] = value
            else:
                # Unknown subkey. Ignore it.
                pass

    for name in names:
        test = tests[name]
        yield Test(name, _command=test.get('command'))


def prepare_revision(r):
    try:
        cmd = ['git', 'checkout', r]
        chatty_call(cmd)
    except CalledProcessError as e:
        raise Fatal('fatal: error checking out commit %s:\n%s' % (r, e.output,))

    if verbosity >= -1:
        cmd = ['git', '--no-pager', 'log', '-1', '--decorate', r]
        try:
            if verbosity >= 0:
                sys.stderr.write('\n')
            chatty_call(cmd, level=0)
            if verbosity >= 0:
                sys.stderr.write('\n')
        except CalledProcessError as e:
            raise Fatal('fatal: error displaying log for commit %s' % (r,))


REUSE_RESULTS_WARNING = """\
WARNING: there are already results stored for the test named '%(name)s'.
Those results will be considered valid for the new test. If that is
not what you want, please re-run this command with the '--forget' option.
"""


def cmd_add(parser, options):
    test = Test(options.test)

    test.command = options.command

    if options.forget:
        initialize = True
    else:
        try:
            old_tree = rev_parse('%s^{tree}' % (test.full_ref,))
        except RevParseError:
            initialize = True
        else:
            # The notes reference already exists and we weren't asked
            # to `--forget`, so leave the existing notes in place:
            initialize = False
            if old_tree != get_empty_tree() and options.forget != False:
                # The notes reference already exists and contains
                # results and the user didn't explicitly ask for
                # `--keep`; emit a warning in case the user forgot to
                # `--forget`:
                sys.stderr.write(
                    AnsiColor.CYAN(REUSE_RESULTS_WARNING % dict(name=test.name)),
                )

    if initialize:
        test.initialize_status('Test results initialized by \'git test add\'')


def iter_commits(parser, options):
    """Iterate over the commits specified by the user.

    Yield the special value 'HEAD' if the current checked-out version
    should be tested."""

    if (not options.commits or options.commits == ['HEAD']) and not options.stdin:
        yield 'HEAD'
        return

    for arg in options.commits:
        limits = arg.split('..')
        if len(limits) == 1:
            yield rev_parse('%s^{commit}' % (arg,))
        elif len(limits) == 2:
            for revision in rev_list('--reverse', '--topo-order', arg):
                yield revision
        else:
            parser.error(
                'commit arguments must be single commits '
                'or of the form \'A..B\''
                )

    if options.stdin:
        for arg in sys.stdin:
            yield rev_parse('%s^{commit}' % (arg.strip(),))


def run_in_dirty_tree(tests, extra_env, options):
    fail_count = 0

    try:
        for test in tests:
            extra_env['GIT_TEST_NAME'] = test.name
            if verbosity >= 0:
                sys.stderr.write(
                    'Using test %s; command: %s\n' % (
                        AnsiColor.CYAN(test.name),
                        AnsiColor.CYAN(test.command),
                    ),
                )

            try:
                test.run(extra_env=extra_env)
            except UserTestError as e:
                sys.stdout.write(
                    'working-tree %s (%s:%s)\n' % (
                        good_bad_text('bad'), test.name, good_bad_text('bad'),
                    ),
                )
                if verbosity >= -1:
                    sys.stderr.write(
                        '\n%s\n' % (
                            AnsiColor.RED(
                                '!!! TEST \'%s\' FAILED (retcode=%d) !!!' % (
                                    test.name, e.returncode,
                                ),
                            ),
                        ),
                    )
                fail_count += 1
                if not options.keep_going:
                    sys.exit(e.returncode)
            else:
                sys.stdout.write(
                    'working-tree %s (%s:%s)\n' % (
                        good_bad_text('good'), test.name, good_bad_text('good'),
                    ),
                )
                if verbosity >= -1:
                    sys.stderr.write(
                        '\n%s\n' % (
                            AnsiColor.GREEN('TEST \'%s\' SUCCESSFUL' % (test.name,)),
                        ),
                    )
    finally:
        if len(tests) == 1:
            # No need for a summary.
            pass
        elif fail_count > 0:
            if verbosity >= -1:
                if fail_count == 1:
                    test_text = 'TEST'
                else:
                    test_text = 'TESTS'

                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.RED('!!! %s %s FAILED !!!' % (fail_count, test_text)),
                    ),
                )

            sys.exit(1)
        else:
            if verbosity >= -1:
                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.GREEN('ALL TESTS SUCCESSFUL'),
                    ),
                )

        sys.stderr.write(
            'Note: working tree is dirty; results will not be saved.\n'
            )


def cmd_run(parser, options):
    extra_env = {
        'GIT_TEST_PREVIOUS_CHECKED_OUT_COMMIT' : None,
        'GIT_TEST_VERBOSITY' : str(verbosity),
    }
    tests = [Test(test_name) for test_name in options.tests]

    try:
        require_clean_work_tree('test-run')
    except UncleanWorkTreeError:
        # Unclean work tree; the only action allowed in this state is
        # testing the working copy:
        if options.commits or options.stdin or options.forget or options.dry_run:
            raise

        run_in_dirty_tree(tests, extra_env, options)
        return

    revisions = list(uniqify(iter_commits(parser, options)))

    if not revisions:
        sys.stderr.write('NO COMMITS SPECIFIED! (so none failed)\n')
        return
    elif revisions == ['HEAD']:
        testing_head = True
        revisions = [rev_parse('HEAD')]
    else:
        testing_head = False

    try:
        cmd = ['git', 'symbolic-ref', 'HEAD']
        head = check_output(cmd, stderr=open(os.devnull, 'wb')).rstrip()
    except CalledProcessError:
        cmd = ['git', 'rev-parse', 'HEAD']
        head = check_output(cmd).rstrip()

    if options.force or options.forget:
        for test in tests:
            if options.forget and verbosity >= 0:
                sys.stderr.write(
                    'Using test \'%s\'; command: %s\n' % (
                        AnsiColor.CYAN(test.name), AnsiColor.CYAN(test.command),
                    ),
                )
            test.forget_status(revisions)
        if options.forget:
            return

    fail_count = 0
    unknown_count = 0
    for r in revisions:
        cmd = ['git', 'rev-parse', '--short', r]
        rs = check_output(cmd).rstrip()
        prepared = False
        failed_tests = []
        for test in tests:
            extra_env['GIT_TEST_NAME'] = test.name

            status = test.read_status(r, rs)

            if status == 'good':
                sys.stdout.write(
                    '%s^{tree} %s (%s:%s)\n' % (
                        r, good_bad_text('good'), test.name, good_bad_text('known-good'),
                    ),
                )
                sys.stderr.write(
                    'Tree %s^{tree} is already known to be %s for test \'%s\'.\n' % (
                        rs, good_bad_text('good'), test.name,
                    ),
                )

            elif status == 'bad':
                if options.retest and not options.dry_run:
                    sys.stderr.write(
                        'Tree %s^{tree} was previously tested to be %s for test \'%s\'; retesting...\n' % (
                            rs, good_bad_text('bad'), test.name,
                        ),
                        )
                    status = None
                    # fall through
                else:
                    sys.stdout.write(
                        '%s^{tree} %s (%s:%s)\n' % (
                            r, good_bad_text('bad'), test.name, good_bad_text('known-bad'),
                        ),
                    )
                    sys.stderr.write(
                        'Tree %s^{tree} is already known to be %s for test \'%s\'!\n' % (
                            rs, good_bad_text('bad'), test.name,
                        ),
                    )
                    failed_tests.append('%s:known-bad' % (test.name,))
                    fail_count += 1
                    status = 'failed'
                    if not options.keep_going:
                        sys.exit(1)

            elif status == 'unknown':
                if options.dry_run:
                    sys.stdout.write(
                        '%s^{tree} %s (%s:%s)\n' % (
                            r, good_bad_text('unknown'), test.name, good_bad_text('unknown'),
                        ),
                    )
                    unknown_count += 1
                else:
                    status = None

            if status is None:
                if not testing_head and not prepared:
                    prepare_revision(r)
                    prepared = True

                try:
                    test.run(extra_env=extra_env)
                except UserTestError as e:
                    # This commit has failed the test.
                    sys.stdout.write(
                        '%s^{tree} %s (%s:%s)\n' % (
                            r, good_bad_text('bad'), test.name, good_bad_text('bad'),
                        ),
                    )

                    test.write_status(r, 'bad')

                    failed_tests.append('%s:bad:retcode=%d' % (test.name, e.returncode,))
                    fail_count += 1

                    if not options.keep_going:
                        if verbosity >= -1:
                            sys.stderr.write(
                                AnsiColor.RED(
                                    FAIL_HEADER_TEMPLATE % dict(
                                        revision=r,
                                        tests=','.join(failed_tests),
                                    ),
                                ),
                            )
                            cmd = ['git', '--no-pager', 'log', '-1', '--decorate', r]
                            chatty_call(cmd, level=-1)
                            sys.stderr.write(AnsiColor.RED(FAIL_TRAILER_TEMPLATE % dict()))

                        sys.exit(e.returncode)
                else:
                    sys.stdout.write(
                        '%s^{tree} %s (%s:%s)\n' % (
                            r, good_bad_text('good'), test.name, good_bad_text('good'),
                        ),
                    )
                    test.write_status(r, 'good')

                extra_env['GIT_TEST_PREVIOUS_CHECKED_OUT_COMMIT'] = r

        if failed_tests and verbosity >= -1:
            sys.stderr.write(
                AnsiColor.RED(
                    FAIL_HEADER_TEMPLATE % dict(
                        revision=r,
                        tests=','.join(failed_tests),
                    ),
                ),
            )
            cmd = ['git', '--no-pager', 'log', '-1', '--decorate', r]
            chatty_call(cmd, level=-1)
            sys.stderr.write(AnsiColor.RED(FAIL_TRAILER_TEMPLATE % dict()))

    if not testing_head:
        cmd = ['git', 'checkout', '-f', re.sub(r'^refs/heads/', '', head)]
        chatty_call(cmd)

    if verbosity >= -1:
        # Write out an overall summary (number of tests failed/unknown):
        if fail_count > 0:
            if fail_count == 1:
                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.RED('!!! %s TEST FAILED !!!' % (fail_count,)),
                    ),
                )
            else:
                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.RED('!!! %s TESTS FAILED !!!' % (fail_count,)),
                    ),
                )

        if unknown_count > 0:
            if unknown_count == 1:
                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.YELLOW('%s TEST UNKNOWN' % (unknown_count,)),
                    ),
                )
            else:
                sys.stderr.write(
                    '\n%s\n' % (
                        AnsiColor.YELLOW('%s TESTS UNKNOWN' % (unknown_count,)),
                    ),
                )

        if fail_count == 0 and unknown_count == 0:
            sys.stderr.write(
                '\n%s\n' % (
                    AnsiColor.GREEN('ALL TESTS SUCCESSFUL'),
                ),
            )

    if fail_count > 0:
        sys.exit(1)
    elif unknown_count > 0:
        sys.exit(2)


def cmd_results(parser, options):
    tests = [Test(test_name) for test_name in options.tests]

    revisions = list(uniqify(iter_commits(parser, options)))
    if not revisions:
        sys.stderr.write('NO COMMITS SPECIFIED! (so none failed)\n')
        return
    elif revisions == ['HEAD']:
        revisions = [rev_parse('HEAD')]

    for r in revisions:
        overall_status = 'good'
        per_test_status = []
        for test in tests:
            status = test.read_status(r)
            if status == 'good':
                per_test_status.append('%s:%s' % (AnsiColor.CYAN(test.name), AnsiColor.GREEN(status)))
            elif status == 'bad':
                per_test_status.append('%s:%s' % (AnsiColor.CYAN(test.name), AnsiColor.RED(status)))
                overall_status = 'bad'
            elif status == 'unknown':
                per_test_status.append('%s:%s' % (AnsiColor.CYAN(test.name), AnsiColor.YELLOW(status)))
                if overall_status == 'good':
                    overall_status = 'unknown'

        per_test_status = ' '.join(per_test_status)

        sys.stdout.write(
            '%s^{tree} %s (%s)\n' % (
                r, good_bad_text(overall_status), per_test_status,
            ),
        )


def cmd_forget_results(parser, options):
    tests = [Test(test_name) for test_name in options.tests]
    for test in tests:
        cmd = ['git', 'config', 'test.%s.command' % (test.name,)]
        try:
            chatty_call(cmd)
        except CalledProcessError:
            # There is no test defined; simply delete the notes reference:
            test.remove_status('Test results deleted by \'git test forget-results\'')
        else:
            test.initialize_status(
                'Test results reinitialized by \'git test forget-results\''
                )


test_re = re.compile(r'^test\.(?P<name>.*)\.command$')

def cmd_list(parser, options):
    for test in iter_tests():
        command = test.command
        if command is None:
            continue

        command = command.rstrip()
        command_lines = command.split('\n')

        if not command_lines:
            continue

        print('%s:' % (test.name,))
        if len(command_lines) == 1:
            print('    command = %s' % (command,))
        else:
            print('    command:')
            for command_line in command_lines:
                print('        %s' % (command_line,))


def cmd_remove(parser, options):
    tests = [Test(test_name) for test_name in options.tests]
    for test in tests:
        test.remove('Test results deleted by \'git test remove\'')


def cmd_help(parser, options, subparsers):
    if options.cmd is not None:
        try:
            subparser = subparsers.choices[options.cmd]
        except KeyError:
            parser.error('Unknown subcommand: %r (%r)\n' % (options.cmd, type(options.cmd)))
        subparser.print_help()
    else:
        parser.print_help()

    parser.exit()


def csv(s):
    return s.split(',')


def main(args):
    global verbosity

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        )

    def add_verbosity_options(parser, help=False):
        if help:
            verbose_help = 'generate more verbose output (may be specified multiple times)'
            quiet_help = 'generate less verbose output (may be specified multiple times)'
        else:
            verbose_help = quiet_help = argparse.SUPPRESS

        parser.add_argument(
            '--verbose', '-v',
            action='count', default=0,
            help=verbose_help,
            )
        parser.add_argument(
            '--quiet', '-q',
            action='count', default=0,
            help=quiet_help,
            )
        parser.add_argument(
            '--color', dest='color', action='store_true', default=None,
            help='print status with colors',
            )
        parser.add_argument(
            '--no-color', dest='color', action='store_false',
            help='print status without colors',
            )

    add_verbosity_options(parser, help=True)

    subparsers = parser.add_subparsers(
        dest='subcommand', help='sub-command',
        parser_class=argparse.ArgumentParser,
        )

    subparser = subparsers.add_parser(
        'add',
        description=(
            'Define a new test by telling what command it should run.'
            ),
        help='define a new test',
        )
    subparser.add_argument(
        '--test', '-t', metavar='name',
        action='store', default='default',
        help='name of test to add (default is \'default\')',
        )
    subparser.add_argument(
        '--forget',
        action='store_true', default=None,
        help='forget any existing results',
        )
    subparser.add_argument(
        '--keep',
        action='store_false', dest='forget',
        help='keep any existing results (default)',
        )
    subparser.add_argument(
        'command',
        help='command to run',
        )
    add_verbosity_options(subparser)

    def add_run_arguments(subparser):
        subparser.add_argument(
            '--test', '--tests', '-t', metavar='name',
            action='store', dest='tests',
            type=csv, default=['default'],
            help='comma-separated name(s) of test(s) (default is \'default\')',
            )
        subparser.add_argument(
            '--force', '-f', action='store_true',
            help=(
                'forget any existing test results for the specified '
                'commits and test them again'
                ),
            )
        subparser.add_argument(
            '--forget', action='store_true',
            help='forget any existing test results for the specified commits',
            )
        subparser.add_argument(
            '--retest', action='store_true',
            help='if a commit is already marked as "bad", try testing it again',
            )
        subparser.add_argument(
            '--keep-going', '-k', action='store_true',
            help=(
                'if a commit fails the test, continue testing other commits '
                'rather than aborting'
                ),
            )
        subparser.add_argument(
            '--dry-run', '-n', action='store_true',
            help=(
                'show known results, without running any new tests'
                ),
            )
        subparser.add_argument(
            '--stdin', action='store_true',
            help=(
                'read the list of commits to test from standard input, '
                'one per line'
                ),
            )
        subparser.add_argument(
            'commits', nargs='*',
            help='commits or ranges of commits to test',
            )

    subparser = subparsers.add_parser(
        'run',
        description=(
            'Run COMMAND for each commit in the specified RANGE in reverse order, '
            'stopping if the command fails.  The return code is that of the last '
            'command executed (i.e., 0 only if the command succeeded for every '
            'specified commit).'
            ),
        help='run a test against one or more commits',
        )
    add_run_arguments(subparser)
    add_verbosity_options(subparser)

    # This command is no longer supported, but emit a help message if
    # it is requested:
    subparser = subparsers.add_parser(
        'range',
        help='obsolete command; please use "git test run" instead',
        )
    # We need to accept the 'run' options and arguments, otherwise
    # argparse will emit an error about unrecognized arguments and
    # abort before we get a chance to emit our help message:
    add_run_arguments(subparser)
    add_verbosity_options(subparser)

    subparser = subparsers.add_parser(
        'results',
        description=(
            'Show any stored results for the specified commits.'
            ),
        help='show any stored test results for the specified commits',
        )
    subparser.add_argument(
        '--test', '--tests', '-t', metavar='name',
        action='store', dest='tests',
        type=csv, default=['default'],
        help='comma-separated name(s) of test(s) (default is \'default\')',
        )
    subparser.add_argument(
        '--stdin', action='store_true',
        help=(
            'read the list of commits from standard input, one per line'
            ),
        )
    subparser.add_argument(
        'commits', nargs='*',
        help='commits or ranges of commits',
        )
    add_verbosity_options(subparser)

    subparser = subparsers.add_parser(
        'forget-results',
        description=(
            'Forget all stored test results for a test.'
            ),
        help='permanently forget stored results for a test',
        )
    subparser.add_argument(
        '--test', '--tests', '-t', metavar='name',
        action='store', dest='tests',
        type=csv, default=['default'],
        help=(
            'comma-separated name(s) of test(s) whose results should be '
            'forgotten (default is \'default\')'
            ),
        )
    add_verbosity_options(subparser)

    subparser = subparsers.add_parser(
        'list',
        description=(
            'List the tests that are currently defined.'
            ),
        help='list the tests that are currently defined',
        )
    add_verbosity_options(subparser)

    subparser = subparsers.add_parser(
        'remove',
        description=(
            'Remove a test definition and all of its stored results.'
            ),
        help='remove a test definition and all of its stored results',
        )
    subparser.add_argument(
        '--test', '--tests', '-t', metavar='name',
        action='store', dest='tests',
        type=csv, default=['default'],
        help='comma-separated name(s) of test(s) to remove (default is \'default\')',
        )
    add_verbosity_options(subparser)

    subparser = subparsers.add_parser(
        'help',
        description=(
            'Print out help for "git test" in general or for a specific '
            'subcommand.'
            ),
        help='print out help and exit',
        )
    subparser.add_argument(
        'cmd', nargs='?', default=None,
        help='subcommand that you want help for (optional)',
        )
    add_verbosity_options(subparser)

    options = parser.parse_args(args)

    verbosity = options.verbose - options.quiet

    # Decide whether to leave colored output on or disable it:
    if options.color == False:
        AnsiColor.disable()
    elif options.color == True:
        # Leave enabled.
        pass
    elif not sys.stdout.isatty():
        AnsiColor.disable()
    else:
        isCmdOrPowershell = (os.getenv('PROMPT', '') == '$P$G')
        if isCmdOrPowershell:
            AnsiColor.disable()

    # Expose the verbosity to child processes, in case they want to
    # adjust their output levels, too:
    os.environ['GIT_TEST_VERBOSITY'] = str(verbosity)

    if options.subcommand == 'add':
        cmd_add(parser, options)
    elif options.subcommand == 'run':
        cmd_run(parser, options)
    elif options.subcommand == 'range':
        parser.error('the \'range\' subcommand has been renamed to \'run\'.')
    elif options.subcommand == 'results':
        cmd_results(parser, options)
    elif options.subcommand == 'forget-results':
        cmd_forget_results(parser, options)
    elif options.subcommand == 'list':
        cmd_list(parser, options)
    elif options.subcommand == 'remove':
        cmd_remove(parser, options)
    elif options.subcommand == 'help':
        cmd_help(parser, options, subparsers)
    else:
        parser.error('Unrecognized subcommand: "%s"' % (options.subcommand,))


if __name__ == '__main__':
    try:
        main(sys.argv[1:])
    except Fatal as e:
        sys.stderr.write(AnsiColor.RED('\nERROR!\n%s\n\n' % (e,)))
        sys.exit(125)


